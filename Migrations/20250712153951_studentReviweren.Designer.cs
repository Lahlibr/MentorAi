// <auto-generated />
using System;
using MentorAi_backd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentorAi_backd.Migrations
{
    [DbContext(typeof(MentorAiDbContext))]
    [Migration("20250712153951_studentReviweren")]
    partial class studentReviweren
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MentorAi_backd.Models.Entity.Student.ProblemAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompilerOutput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("ExecutionTimeMs")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MemoryUsageBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentProfileId")
                        .HasColumnType("int");

                    b.Property<string>("SubmittedCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestResultsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.HasIndex("StudentProfileId");

                    b.ToTable("ProblemAttempts");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.Student.StudentCertification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CertificationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StudentProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CertificationId");

                    b.HasIndex("StudentProfileId", "CertificationId")
                        .IsUnique();

                    b.ToTable("StudentCertifications");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.Student.StudentProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("AssessmentScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentLearningGoal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredLearningStyle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("StudentProfiles", t =>
                        {
                            t.Property("UserId")
                                .HasColumnName("UserId1");
                        });

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Age = 22,
                            AssessmentScore = 80,
                            CreatedAt = new DateTime(2025, 7, 12, 15, 39, 50, 777, DateTimeKind.Utc).AddTicks(305),
                            CurrentLearningGoal = "Master Algorithms",
                            Id = 1,
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2025, 7, 12, 15, 39, 50, 777, DateTimeKind.Utc).AddTicks(306),
                            PreferredLearningStyle = "Visual"
                        });
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.Student.StudentRoadmapProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentModuleId")
                        .HasColumnType("int");

                    b.Property<double>("CurrentProgressPercentage")
                        .HasColumnType("float");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoadmapId")
                        .HasColumnType("int");

                    b.Property<int>("StudentProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentModuleId");

                    b.HasIndex("RoadmapId");

                    b.HasIndex("StudentProfileId");

                    b.ToTable("StudentRoadmapProgresses");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.Student.UserBadge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AwardedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("BadgeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("StudentProfileId", "BadgeId")
                        .IsUnique();

                    b.ToTable("UserBadges");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Badges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 12, 15, 39, 51, 134, DateTimeKind.Utc).AddTicks(8041),
                            Criteria = "Submit any problem solution.",
                            Description = "Awarded for submitting your first coding solution.",
                            ImageUrl = "https://placehold.co/50x50/28a745/ffffff?text=Badge1",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2025, 7, 12, 15, 39, 51, 134, DateTimeKind.Utc).AddTicks(8041),
                            Name = "First Code"
                        });
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateUrl = "https://mentorai.com/cert/csharp-1",
                            CreatedAt = new DateTime(2025, 7, 12, 15, 39, 51, 134, DateTimeKind.Utc).AddTicks(7996),
                            Criteria = "Complete 'Beginner C# Development' roadmap.",
                            Description = "Demonstrates basic proficiency in C#.",
                            ImageUrl = "https://placehold.co/100x100/007bff/ffffff?text=C#Cert",
                            IsDeleted = false,
                            IssuedDate = new DateTime(2025, 7, 12, 15, 39, 51, 134, DateTimeKind.Utc).AddTicks(7995),
                            Issuer = "MentorAI",
                            LastUpdatedAt = new DateTime(2025, 7, 12, 15, 39, 51, 134, DateTimeKind.Utc).AddTicks(7996),
                            Title = "C# Fundamentals Certified"
                        });
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderInRoadmap")
                        .HasColumnType("int");

                    b.Property<int>("RoadmapId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoadmapId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 12, 15, 39, 51, 134, DateTimeKind.Utc).AddTicks(7916),
                            Description = "Basic syntax and variables.",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2025, 7, 12, 15, 39, 51, 134, DateTimeKind.Utc).AddTicks(7916),
                            OrderInRoadmap = 1,
                            RoadmapId = 1,
                            Title = "Introduction to C#"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 12, 15, 39, 51, 134, DateTimeKind.Utc).AddTicks(7919),
                            Description = "If statements and loops.",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2025, 7, 12, 15, 39, 51, 134, DateTimeKind.Utc).AddTicks(7919),
                            OrderInRoadmap = 2,
                            RoadmapId = 1,
                            Title = "Control Flow"
                        });
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.Problem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<string>("ExampleTestCasesJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpectedSolutionHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("OrderInModule")
                        .HasColumnType("int");

                    b.Property<string>("OutputFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SolutionTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Problems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 12, 15, 39, 51, 134, DateTimeKind.Utc).AddTicks(7966),
                            Description = "Write a function that takes two integers and returns their sum.",
                            DifficultyLevel = 0,
                            ExampleTestCasesJson = "[{\"input\":\"1,2\",\"output\":\"3\"},{\"input\":\"-5,10\",\"output\":\"5\"}]",
                            ExpectedSolutionHash = "dummyhash1",
                            InputFormat = "Two integers separated by a comma.",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2025, 7, 12, 15, 39, 51, 134, DateTimeKind.Utc).AddTicks(7966),
                            ModuleId = 1,
                            OrderInModule = 1,
                            OutputFormat = "Their sum.",
                            SolutionTemplate = "public class Solution { public int Sum(int a, int b) { /* Your code here */ return 0; } }",
                            Title = "Sum of Two Numbers"
                        });
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualReviewEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualReviewStartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProblemAttemptId")
                        .HasColumnType("int");

                    b.Property<double?>("RatingGivenByStudent")
                        .HasColumnType("float");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("VideoConferenceLink")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ProblemAttemptId")
                        .IsUnique();

                    b.HasIndex("ReviewerId");

                    b.HasIndex("StudentId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.ReviewerProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpertiseAreasJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<bool>("IsAvailableForReviews")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewsCompleted")
                        .HasColumnType("int");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("ReviewerProfiles", t =>
                        {
                            t.Property("UserId")
                                .HasColumnName("UserId1");
                        });

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            Availability = "Weekdays",
                            AverageRating = 4.5,
                            Bio = "Experienced .NET developer with a passion for clean code and mentorship.",
                            CreatedAt = new DateTime(2025, 7, 12, 15, 39, 50, 775, DateTimeKind.Utc).AddTicks(5968),
                            ExpertiseAreasJson = "[\"C#\", \".NET Core\", \"ASP.NET\", \"SQL Server\", \"Azure\"]",
                            Id = 2,
                            IsAvailableForReviews = true,
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2025, 7, 12, 15, 39, 50, 775, DateTimeKind.Utc).AddTicks(5969),
                            ReviewsCompleted = 50,
                            YearsOfExperience = 5
                        });
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.Roadmap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedCompletionHours")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalCertifications")
                        .HasColumnType("int");

                    b.Property<int>("TotalChallenges")
                        .HasColumnType("int");

                    b.Property<int>("TotalModules")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roadmaps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 12, 15, 39, 51, 134, DateTimeKind.Utc).AddTicks(7866),
                            Description = "Learn the fundamentals of C# programming.",
                            DifficultyLevel = "Beginner",
                            EstimatedCompletionHours = 40,
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2025, 7, 12, 15, 39, 51, 134, DateTimeKind.Utc).AddTicks(7867),
                            Title = "Beginner C# Development",
                            TotalCertifications = 0,
                            TotalChallenges = 0,
                            TotalModules = 0
                        });
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedTermsAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastFailedLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastSuccessfulLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtpSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("PasswordResetToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("ProfileCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VerificationToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("VerificationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 12, 15, 39, 50, 891, DateTimeKind.Utc).AddTicks(9728),
                            Email = "alice@example.com",
                            EmailVerified = true,
                            FailedLoginAttempts = 0,
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2025, 7, 12, 15, 39, 50, 891, DateTimeKind.Utc).AddTicks(9736),
                            Password = "$2a$11$FwEQIIFNE39ZUc/zXmrWFOTlpdJBisAOlqQiYVkEVfhUOip51Au2.",
                            ProfileCompleted = true,
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "alice_student",
                            UserRole = "Student"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 12, 15, 39, 51, 11, DateTimeKind.Utc).AddTicks(4526),
                            Email = "bob@example.com",
                            EmailVerified = true,
                            FailedLoginAttempts = 0,
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2025, 7, 12, 15, 39, 51, 11, DateTimeKind.Utc).AddTicks(4530),
                            Password = "$2a$11$CwuiXus48ct36t3NSJGZ2.CqSBRRu2roSi/p8dnbtgDClvm6PEtDS",
                            ProfileCompleted = true,
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "bob_reviewer",
                            UserRole = "Reviewer"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 12, 15, 39, 51, 134, DateTimeKind.Utc).AddTicks(6707),
                            Email = "charlie@example.com",
                            EmailVerified = true,
                            FailedLoginAttempts = 0,
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2025, 7, 12, 15, 39, 51, 134, DateTimeKind.Utc).AddTicks(6715),
                            Password = "$2a$11$1A5KnmG7VNlq0AipmgmyRuowxtnubAgGr0gF4FTqoTokbtfaEDbPm",
                            ProfileCompleted = true,
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "charlie_admin",
                            UserRole = "Admin"
                        });
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.Student.ProblemAttempt", b =>
                {
                    b.HasOne("MentorAi_backd.Models.Entity.UserEntity.Problem", "Problem")
                        .WithMany("ProblemAttempts")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentorAi_backd.Models.Entity.Student.StudentProfile", "StudentProfile")
                        .WithMany("ProblemAttempts")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.Student.StudentCertification", b =>
                {
                    b.HasOne("MentorAi_backd.Models.Entity.UserEntity.Certification", "Certification")
                        .WithMany("StudentCertifications")
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentorAi_backd.Models.Entity.Student.StudentProfile", "StudentProfile")
                        .WithMany("StudentCertifications")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.Student.StudentProfile", b =>
                {
                    b.HasOne("MentorAi_backd.Models.Entity.UserEntity.User", "User")
                        .WithOne("StudentProfile")
                        .HasForeignKey("MentorAi_backd.Models.Entity.Student.StudentProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.Student.StudentRoadmapProgress", b =>
                {
                    b.HasOne("MentorAi_backd.Models.Entity.UserEntity.Module", "CurrentModule")
                        .WithMany()
                        .HasForeignKey("CurrentModuleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MentorAi_backd.Models.Entity.UserEntity.Roadmap", "Roadmap")
                        .WithMany()
                        .HasForeignKey("RoadmapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentorAi_backd.Models.Entity.Student.StudentProfile", "StudentProfile")
                        .WithMany("RoadmapProgresses")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentModule");

                    b.Navigation("Roadmap");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.Student.UserBadge", b =>
                {
                    b.HasOne("MentorAi_backd.Models.Entity.UserEntity.Badge", "Badge")
                        .WithMany("UserBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentorAi_backd.Models.Entity.Student.StudentProfile", "StudentProfile")
                        .WithMany("UserBadges")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.Module", b =>
                {
                    b.HasOne("MentorAi_backd.Models.Entity.UserEntity.Roadmap", "Roadmap")
                        .WithMany("Modules")
                        .HasForeignKey("RoadmapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roadmap");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.Problem", b =>
                {
                    b.HasOne("MentorAi_backd.Models.Entity.UserEntity.Module", "Module")
                        .WithMany("Problems")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.Review", b =>
                {
                    b.HasOne("MentorAi_backd.Models.Entity.Student.ProblemAttempt", "ProblemAttempt")
                        .WithOne("Review")
                        .HasForeignKey("MentorAi_backd.Models.Entity.UserEntity.Review", "ProblemAttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentorAi_backd.Models.Entity.UserEntity.User", "Reviewer")
                        .WithMany("ReviewsAsReviewer")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentorAi_backd.Models.Entity.UserEntity.User", "Student")
                        .WithMany("ReviewsAsStudent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProblemAttempt");

                    b.Navigation("Reviewer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.ReviewerProfile", b =>
                {
                    b.HasOne("MentorAi_backd.Models.Entity.UserEntity.User", "User")
                        .WithOne("ReviewerProfile")
                        .HasForeignKey("MentorAi_backd.Models.Entity.UserEntity.ReviewerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.Student.ProblemAttempt", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.Student.StudentProfile", b =>
                {
                    b.Navigation("ProblemAttempts");

                    b.Navigation("RoadmapProgresses");

                    b.Navigation("StudentCertifications");

                    b.Navigation("UserBadges");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.Badge", b =>
                {
                    b.Navigation("UserBadges");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.Certification", b =>
                {
                    b.Navigation("StudentCertifications");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.Module", b =>
                {
                    b.Navigation("Problems");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.Problem", b =>
                {
                    b.Navigation("ProblemAttempts");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.Roadmap", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("MentorAi_backd.Models.Entity.UserEntity.User", b =>
                {
                    b.Navigation("ReviewerProfile");

                    b.Navigation("ReviewsAsReviewer");

                    b.Navigation("ReviewsAsStudent");

                    b.Navigation("StudentProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
